{
  "meta": {
    "instanceId": "local"
  },
  "nodes": [
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "sheet",
        "sheetId": {
          "__rl": true,
          "value": "Leads",
          "mode": "list"
        },
        "simple": false,
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "options": {}
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "New Lead Added",
      "type": "n8n-nodes-base.googleSheetsTrigger",
      "typeVersion": 2,
      "position": [
        240,
        300
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-oauth2",
          "name": "Google Sheets OAuth2 API"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Warm Intro Finder - Graph Matching Logic\n\n// Sample contacts data (in production, fetch from Google Sheets or Airtable)\nconst contacts = [\n  {\n    \"name\": \"Alice Thompson\",\n    \"company\": \"Acme Corp\",\n    \"email\": \"alice.thompson@acmecorp.com\",\n    \"title\": \"Director of Engineering\",\n    \"relationship_type\": \"former_colleague\",\n    \"connection_strength\": \"strong\",\n    \"last_contact\": \"2023-12-10\",\n    \"notes\": \"Worked together at previous company for 3 years\"\n  },\n  {\n    \"name\": \"Bob Wilson\",\n    \"company\": \"TechStart Inc\",\n    \"email\": \"bob.wilson@techstart.com\",\n    \"title\": \"Senior Developer\",\n    \"relationship_type\": \"university_friend\",\n    \"connection_strength\": \"medium\",\n    \"last_contact\": \"2023-11-15\",\n    \"notes\": \"College roommate, stays in touch occasionally\"\n  },\n  {\n    \"name\": \"Carol Davis\",\n    \"company\": \"DataFlow Systems\",\n    \"email\": \"carol.davis@dataflow.com\",\n    \"title\": \"VP of Operations\",\n    \"relationship_type\": \"industry_contact\",\n    \"connection_strength\": \"medium\",\n    \"last_contact\": \"2023-10-20\",\n    \"notes\": \"Met at industry conference, exchanged business cards\"\n  },\n  {\n    \"name\": \"Emma Foster\",\n    \"company\": \"CloudVision Ltd\",\n    \"email\": \"emma.foster@cloudvision.com\",\n    \"title\": \"Senior Manager\",\n    \"relationship_type\": \"mutual_connection\",\n    \"connection_strength\": \"weak\",\n    \"last_contact\": \"2023-09-05\",\n    \"notes\": \"Connected through LinkedIn mutual friend\"\n  },\n  {\n    \"name\": \"Henry Kim\",\n    \"company\": \"InnovateLab\",\n    \"email\": \"henry.kim@innovatelab.com\",\n    \"title\": \"Co-founder\",\n    \"relationship_type\": \"investor_network\",\n    \"connection_strength\": \"medium\",\n    \"last_contact\": \"2023-11-30\",\n    \"notes\": \"Met through investor network events\"\n  }\n];\n\n// Get the new lead data from the trigger\nconst leadData = $input.all()[0].json;\n\nconsole.log('Processing new lead:', leadData);\n\n// Find matching contacts at the same company\nconst matchingContacts = contacts.filter(contact => \n  contact.company.toLowerCase() === leadData.Company.toLowerCase()\n);\n\nconsole.log('Found matching contacts:', matchingContacts);\n\nlet result = {\n  ...leadData,\n  relationship_status: 'cold_outreach',\n  connection_details: null,\n  connection_strength: null,\n  intro_message_template: null\n};\n\nif (matchingContacts.length > 0) {\n  // Sort by connection strength (strong > medium > weak)\n  const strengthOrder = { 'strong': 3, 'medium': 2, 'weak': 1 };\n  const bestContact = matchingContacts.sort((a, b) => \n    strengthOrder[b.connection_strength] - strengthOrder[a.connection_strength]\n  )[0];\n  \n  result.relationship_status = 'warm_intro_possible';\n  result.connection_details = `${bestContact.name} (${bestContact.relationship_type})`;\n  result.connection_strength = bestContact.connection_strength;\n  result.contact_name = bestContact.name;\n  result.contact_email = bestContact.email;\n  result.contact_title = bestContact.title;\n  result.relationship_notes = bestContact.notes;\n  \n  // Generate intro message template based on relationship type\n  const templates = {\n    'former_colleague': `Hi ${bestContact.name}, I hope you're doing well! I wanted to reach out about someone who might be a great fit for ${leadData.Company}. ${leadData.Name} is the ${leadData.Title} there, and I think you two should connect.`,\n    'university_friend': `Hey ${bestContact.name}! Hope all is well. I came across ${leadData.Name} who works as ${leadData.Title} at ${leadData.Company}. Given your role there, I thought you might want to connect.`,\n    'industry_contact': `Hi ${bestContact.name}, I hope you're doing well. I wanted to introduce you to ${leadData.Name}, who is the ${leadData.Title} at ${leadData.Company}. I think there could be some great synergy.`,\n    'mutual_connection': `Hi ${bestContact.name}, I hope this finds you well. I'd like to introduce you to ${leadData.Name} from ${leadData.Company}. I think you two should connect.`,\n    'investor_network': `Hi ${bestContact.name}, hope you're doing great! I wanted to connect you with ${leadData.Name}, the ${leadData.Title} at ${leadData.Company}. I think there might be some interesting opportunities to explore.`\n  };\n  \n  result.intro_message_template = templates[bestContact.relationship_type] || templates['industry_contact'];\n}\n\nconsole.log('Final result:', result);\n\nreturn [result];"
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Graph Matcher",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "condition1",
              "leftValue": "={{ $json.relationship_status }}",
              "rightValue": "warm_intro_possible",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Warm or Cold?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "sales-alerts",
          "mode": "name"
        },
        "text": "üî• *Warm Intro Opportunity!*\n\n*Lead:* {{ $json.Name }} ({{ $json.Title }})\n*Company:* {{ $json.Company }}\n*Email:* {{ $json.Email }}\n\n*Connection:* {{ $json.connection_details }}\n*Strength:* {{ $json.connection_strength }}\n\n*Suggested Intro Message:*\n{{ $json.intro_message_template }}\n\n_Time to make that warm introduction! ü§ù_",
        "otherOptions": {}
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Slack Warm Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        900,
        200
      ],
      "credentials": {
        "slackOAuth2Api": {
          "id": "slack-oauth2",
          "name": "Slack OAuth2 API"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "sales-alerts",
          "mode": "name"
        },
        "text": "‚ùÑÔ∏è *Cold Outreach Required*\n\n*Lead:* {{ $json.Name }} ({{ $json.Title }})\n*Company:* {{ $json.Company }}\n*Email:* {{ $json.Email }}\n\n*Status:* No warm connections found in network\n*Next Steps:* Proceed with cold outreach strategy\n\n_Research the company and personalize your approach! üéØ_",
        "otherOptions": {}
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Slack Cold Notification",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        900,
        400
      ],
      "credentials": {
        "slackOAuth2Api": {
          "id": "slack-oauth2",
          "name": "Slack OAuth2 API"
        }
      }
    }
  ],
  "connections": {
    "New Lead Added": {
      "main": [
        [
          {
            "node": "Graph Matcher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Graph Matcher": {
      "main": [
        [
          {
            "node": "Warm or Cold?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Warm or Cold?": {
      "main": [
        [
          {
            "node": "Slack Warm Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Slack Cold Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}
